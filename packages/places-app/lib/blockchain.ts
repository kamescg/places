// Generated by @wagmi/cli@0.1.14 on 4/12/2023 at 8:11:46 AM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Owned
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownedABI = [
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PlaceFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const placeFactoryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'place', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlaceCreated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
      {
        name: 'contractMetadata',
        internalType: 'struct Place.ContractMetadata',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'image', internalType: 'string', type: 'string' },
          { name: 'externalLink', internalType: 'string', type: 'string' },
          { name: 'sellerFeeBasisPoints', internalType: 'string', type: 'string' },
          { name: 'feeRecipient', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'createPlace',
    outputs: [{ name: '', internalType: 'contract Place', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Place
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const placeABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
      { name: '_imgUri', internalType: 'string', type: 'string' },
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_owner', internalType: 'address', type: 'address' },
      {
        name: '_contractMetadata',
        internalType: 'struct Place.ContractMetadata',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'image', internalType: 'string', type: 'string' },
          { name: 'externalLink', internalType: 'string', type: 'string' },
          { name: 'sellerFeeBasisPoints', internalType: 'string', type: 'string' },
          { name: 'feeRecipient', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  { type: 'error', inputs: [], name: 'AlreadyMinted' },
  { type: 'error', inputs: [], name: 'InvalidRecipient' },
  { type: 'error', inputs: [], name: 'NotApproved' },
  { type: 'error', inputs: [], name: 'NotMinted' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  { type: 'error', inputs: [], name: 'UnsafeRecipient' },
  { type: 'error', inputs: [], name: 'WrongFrom' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'contractURI', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'getPrice', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'imgUri', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'payable', type: 'function', inputs: [{ name: 'to', internalType: 'address', type: 'address' }], name: 'mint', outputs: [] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'nextTokenId', outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'price', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  { type: 'error', inputs: [], name: 'AlreadyMinted' },
  { type: 'error', inputs: [], name: 'InvalidRecipient' },
  { type: 'error', inputs: [], name: 'NotApproved' },
  { type: 'error', inputs: [], name: 'NotMinted' },
  { type: 'error', inputs: [], name: 'UnsafeRecipient' },
  { type: 'error', inputs: [], name: 'WrongFrom' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721TokenReceiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721TokenReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CREATE3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const create3ABI = [
  { type: 'error', inputs: [], name: 'DeploymentFailed' },
  { type: 'error', inputs: [], name: 'InitializationFailed' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EIP712
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eip712ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FixedPointMathLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const fixedPointMathLibABI = [
  { type: 'error', inputs: [], name: 'DivFailed' },
  { type: 'error', inputs: [], name: 'DivWadFailed' },
  { type: 'error', inputs: [], name: 'ExpOverflow' },
  { type: 'error', inputs: [], name: 'FactorialOverflow' },
  { type: 'error', inputs: [], name: 'LnWadUndefined' },
  { type: 'error', inputs: [], name: 'Log2Undefined' },
  { type: 'error', inputs: [], name: 'MulDivFailed' },
  { type: 'error', inputs: [], name: 'MulWadFailed' },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'x', internalType: 'uint256', type: 'uint256' }],
    name: 'factorial',
    outputs: [{ name: 'result', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LibClone
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const libCloneABI = [{ type: 'error', inputs: [], name: 'DeploymentFailed' }] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LibString
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const libStringABI = [{ type: 'error', inputs: [], name: 'HexLengthInsufficient' }] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Multicallable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multicallableABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const permitABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'sig', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'allowed', internalType: 'bool', type: 'bool' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReentrancyGuard
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reentrancyGuardABI = [{ type: 'error', inputs: [], name: 'Reentrancy' }] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SSTORE2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sstore2ABI = [
  { type: 'error', inputs: [], name: 'DeploymentFailed' },
  { type: 'error', inputs: [], name: 'InvalidPointer' },
  { type: 'error', inputs: [], name: 'ReadOutOfBounds' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeCastLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeCastLibABI = [{ type: 'error', inputs: [], name: 'OverFlow' }] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeMulticallable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeMulticallableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeTransferLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeTransferLibABI = [
  { type: 'error', inputs: [], name: 'ApproveFailed' },
  { type: 'error', inputs: [], name: 'ETHTransferFailed' },
  { type: 'error', inputs: [], name: 'TransferFailed' },
  { type: 'error', inputs: [], name: 'TransferFromFailed' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SelfPermit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const selfPermitABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract Permit', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract Permit', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit1155',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract Permit', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'sig', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'selfPermit721',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract Permit', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit721',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract Permit', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermitAllowed',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownedABI}__.
 */
export function useOwned(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownedABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedABI}__.
 */
export function useOwnedRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof ownedABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ownedABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ownedABI, ...config } as UseContractReadConfig<typeof ownedABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnedOwner<TSelectData = ReadContractResult<typeof ownedABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof ownedABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownedABI, functionName: 'owner', ...config } as UseContractReadConfig<typeof ownedABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedABI}__.
 */
export function useOwnedWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ownedABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedABI, TFunctionName>({ abi: ownedABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnedTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof ownedABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedABI, 'transferOwnership'>({ abi: ownedABI, functionName: 'transferOwnership', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedABI}__.
 */
export function usePrepareOwnedWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedABI, ...config } as UsePrepareContractWriteConfig<typeof ownedABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnedTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof ownedABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedABI}__.
 */
export function useOwnedEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof ownedABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: ownedABI, ...config } as UseContractEventConfig<typeof ownedABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnedOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof ownedABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownedABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof ownedABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link placeFactoryABI}__.
 */
export function usePlaceFactory(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: placeFactoryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link placeFactoryABI}__.
 */
export function usePlaceFactoryWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof placeFactoryABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof placeFactoryABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof placeFactoryABI, TFunctionName>({ abi: placeFactoryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link placeFactoryABI}__ and `functionName` set to `"createPlace"`.
 */
export function usePlaceFactoryCreatePlace<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof placeFactoryABI, 'createPlace'>['abi'], 'createPlace'> & {
        functionName?: 'createPlace'
      }
    : UseContractWriteConfig<TMode, typeof placeFactoryABI, 'createPlace'> & {
        abi?: never
        functionName?: 'createPlace'
      } = {} as any
) {
  return useContractWrite<TMode, typeof placeFactoryABI, 'createPlace'>({ abi: placeFactoryABI, functionName: 'createPlace', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link placeFactoryABI}__.
 */
export function usePreparePlaceFactoryWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof placeFactoryABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: placeFactoryABI, ...config } as UsePrepareContractWriteConfig<typeof placeFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link placeFactoryABI}__ and `functionName` set to `"createPlace"`.
 */
export function usePreparePlaceFactoryCreatePlace(
  config: Omit<UsePrepareContractWriteConfig<typeof placeFactoryABI, 'createPlace'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: placeFactoryABI, functionName: 'createPlace', ...config } as UsePrepareContractWriteConfig<
    typeof placeFactoryABI,
    'createPlace'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link placeFactoryABI}__.
 */
export function usePlaceFactoryEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof placeFactoryABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: placeFactoryABI, ...config } as UseContractEventConfig<typeof placeFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link placeFactoryABI}__ and `eventName` set to `"PlaceCreated"`.
 */
export function usePlaceFactoryPlaceCreatedEvent(
  config: Omit<UseContractEventConfig<typeof placeFactoryABI, 'PlaceCreated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: placeFactoryABI, eventName: 'PlaceCreated', ...config } as UseContractEventConfig<
    typeof placeFactoryABI,
    'PlaceCreated'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link placeABI}__.
 */
export function usePlace(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: placeABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__.
 */
export function usePlaceRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof placeABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof placeABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: placeABI, ...config } as UseContractReadConfig<typeof placeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"balanceOf"`.
 */
export function usePlaceBalanceOf<TSelectData = ReadContractResult<typeof placeABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<typeof placeABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"contractURI"`.
 */
export function usePlaceContractUri<TSelectData = ReadContractResult<typeof placeABI, 'contractURI'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'contractURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'contractURI', ...config } as UseContractReadConfig<
    typeof placeABI,
    'contractURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"getApproved"`.
 */
export function usePlaceGetApproved<TSelectData = ReadContractResult<typeof placeABI, 'getApproved'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'getApproved', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof placeABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"getPrice"`.
 */
export function usePlaceGetPrice<TSelectData = ReadContractResult<typeof placeABI, 'getPrice'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'getPrice', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'getPrice', ...config } as UseContractReadConfig<typeof placeABI, 'getPrice', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"imgUri"`.
 */
export function usePlaceImgUri<TSelectData = ReadContractResult<typeof placeABI, 'imgUri'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'imgUri', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'imgUri', ...config } as UseContractReadConfig<typeof placeABI, 'imgUri', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function usePlaceIsApprovedForAll<TSelectData = ReadContractResult<typeof placeABI, 'isApprovedForAll'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'isApprovedForAll', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof placeABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"name"`.
 */
export function usePlaceName<TSelectData = ReadContractResult<typeof placeABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'name', ...config } as UseContractReadConfig<typeof placeABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"nextTokenId"`.
 */
export function usePlaceNextTokenId<TSelectData = ReadContractResult<typeof placeABI, 'nextTokenId'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'nextTokenId', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'nextTokenId', ...config } as UseContractReadConfig<
    typeof placeABI,
    'nextTokenId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"owner"`.
 */
export function usePlaceOwner<TSelectData = ReadContractResult<typeof placeABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'owner', ...config } as UseContractReadConfig<typeof placeABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"ownerOf"`.
 */
export function usePlaceOwnerOf<TSelectData = ReadContractResult<typeof placeABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<typeof placeABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"price"`.
 */
export function usePlacePrice<TSelectData = ReadContractResult<typeof placeABI, 'price'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'price', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'price', ...config } as UseContractReadConfig<typeof placeABI, 'price', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePlaceSupportsInterface<TSelectData = ReadContractResult<typeof placeABI, 'supportsInterface'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'supportsInterface', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof placeABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"symbol"`.
 */
export function usePlaceSymbol<TSelectData = ReadContractResult<typeof placeABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'symbol', ...config } as UseContractReadConfig<typeof placeABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"tokenURI"`.
 */
export function usePlaceTokenUri<TSelectData = ReadContractResult<typeof placeABI, 'tokenURI'>>(
  config: Omit<UseContractReadConfig<typeof placeABI, 'tokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: placeABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<typeof placeABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link placeABI}__.
 */
export function usePlaceWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof placeABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof placeABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof placeABI, TFunctionName>({ abi: placeABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"approve"`.
 */
export function usePlaceApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof placeABI, 'approve'>['abi'], 'approve'> & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof placeABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof placeABI, 'approve'>({ abi: placeABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"mint"`.
 */
export function usePlaceMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof placeABI, 'mint'>['abi'], 'mint'> & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof placeABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any
) {
  return useContractWrite<TMode, typeof placeABI, 'mint'>({ abi: placeABI, functionName: 'mint', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePlaceSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof placeABI, 'safeTransferFrom'>['abi'], 'safeTransferFrom'> & {
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<TMode, typeof placeABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof placeABI, 'safeTransferFrom'>({ abi: placeABI, functionName: 'safeTransferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePlaceSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof placeABI, 'setApprovalForAll'>['abi'], 'setApprovalForAll'> & {
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<TMode, typeof placeABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof placeABI, 'setApprovalForAll'>({ abi: placeABI, functionName: 'setApprovalForAll', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePlaceTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof placeABI, 'transferFrom'>['abi'], 'transferFrom'> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof placeABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof placeABI, 'transferFrom'>({ abi: placeABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePlaceTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof placeABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof placeABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof placeABI, 'transferOwnership'>({ abi: placeABI, functionName: 'transferOwnership', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link placeABI}__.
 */
export function usePreparePlaceWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof placeABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: placeABI, ...config } as UsePrepareContractWriteConfig<typeof placeABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"approve"`.
 */
export function usePreparePlaceApprove(config: Omit<UsePrepareContractWriteConfig<typeof placeABI, 'approve'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: placeABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<typeof placeABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"mint"`.
 */
export function usePreparePlaceMint(config: Omit<UsePrepareContractWriteConfig<typeof placeABI, 'mint'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: placeABI, functionName: 'mint', ...config } as UsePrepareContractWriteConfig<typeof placeABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePreparePlaceSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof placeABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: placeABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof placeABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePreparePlaceSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof placeABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: placeABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof placeABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePreparePlaceTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof placeABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: placeABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof placeABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link placeABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePlaceTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof placeABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: placeABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof placeABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link placeABI}__.
 */
export function usePlaceEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof placeABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: placeABI, ...config } as UseContractEventConfig<typeof placeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link placeABI}__ and `eventName` set to `"Approval"`.
 */
export function usePlaceApprovalEvent(config: Omit<UseContractEventConfig<typeof placeABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: placeABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof placeABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link placeABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function usePlaceApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof placeABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: placeABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<typeof placeABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link placeABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePlaceOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof placeABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: placeABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof placeABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link placeABI}__ and `eventName` set to `"Transfer"`.
 */
export function usePlaceTransferEvent(config: Omit<UseContractEventConfig<typeof placeABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: placeABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof placeABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<TSelectData = ReadContractResult<typeof erc721ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<TSelectData = ReadContractResult<typeof erc721ABI, 'getApproved'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'getApproved', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<TSelectData = ReadContractResult<typeof erc721ABI, 'isApprovedForAll'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<TSelectData = ReadContractResult<typeof erc721ABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'name', ...config } as UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<TSelectData = ReadContractResult<typeof erc721ABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface<TSelectData = ReadContractResult<typeof erc721ABI, 'supportsInterface'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'supportsInterface', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<TSelectData = ReadContractResult<typeof erc721ABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'symbol', ...config } as UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<TSelectData = ReadContractResult<typeof erc721ABI, 'tokenURI'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({ abi: erc721ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'], 'approve'> & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({ abi: erc721ABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'], 'safeTransferFrom'> & {
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({ abi: erc721ABI, functionName: 'safeTransferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, 'setApprovalForAll'>['abi'], 'setApprovalForAll'> & {
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({ abi: erc721ABI, functionName: 'setApprovalForAll', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'], 'transferFrom'> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({ abi: erc721ABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721ABI, ...config } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721ABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721ABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc721ABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721ABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof erc721ABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721ABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc721ABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(config: Omit<UseContractEventConfig<typeof erc721ABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: erc721ABI, ...config } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(config: Omit<UseContractEventConfig<typeof erc721ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc721ABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721ABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(config: Omit<UseContractEventConfig<typeof erc721ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc721ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721TokenReceiverABI}__.
 */
export function useErc721TokenReceiver(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721TokenReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721TokenReceiverABI}__.
 */
export function useErc721TokenReceiverWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721TokenReceiverABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc721TokenReceiverABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721TokenReceiverABI, TFunctionName>({ abi: erc721TokenReceiverABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721TokenReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useErc721TokenReceiverOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721TokenReceiverABI, 'onERC721Received'>['abi'], 'onERC721Received'> & {
        functionName?: 'onERC721Received'
      }
    : UseContractWriteConfig<TMode, typeof erc721TokenReceiverABI, 'onERC721Received'> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721TokenReceiverABI, 'onERC721Received'>({
    abi: erc721TokenReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721TokenReceiverABI}__.
 */
export function usePrepareErc721TokenReceiverWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721TokenReceiverABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721TokenReceiverABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc721TokenReceiverABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721TokenReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareErc721TokenReceiverOnErc721Received(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721TokenReceiverABI, 'onERC721Received'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721TokenReceiverABI, functionName: 'onERC721Received', ...config } as UsePrepareContractWriteConfig<
    typeof erc721TokenReceiverABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link create3ABI}__.
 */
export function useCreate3(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: create3ABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: eip712ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof eip712ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof eip712ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: eip712ABI, ...config } as UseContractReadConfig<typeof eip712ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712ABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useEip712DomainSeparator<TSelectData = ReadContractResult<typeof eip712ABI, 'DOMAIN_SEPARATOR'>>(
  config: Omit<UseContractReadConfig<typeof eip712ABI, 'DOMAIN_SEPARATOR', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: eip712ABI, functionName: 'DOMAIN_SEPARATOR', ...config } as UseContractReadConfig<
    typeof eip712ABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link fixedPointMathLibABI}__.
 */
export function useFixedPointMathLib(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: fixedPointMathLibABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fixedPointMathLibABI}__.
 */
export function useFixedPointMathLibRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof fixedPointMathLibABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof fixedPointMathLibABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: fixedPointMathLibABI, ...config } as UseContractReadConfig<typeof fixedPointMathLibABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fixedPointMathLibABI}__ and `functionName` set to `"factorial"`.
 */
export function useFixedPointMathLibFactorial<TSelectData = ReadContractResult<typeof fixedPointMathLibABI, 'factorial'>>(
  config: Omit<UseContractReadConfig<typeof fixedPointMathLibABI, 'factorial', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: fixedPointMathLibABI, functionName: 'factorial', ...config } as UseContractReadConfig<
    typeof fixedPointMathLibABI,
    'factorial',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<TSelectData = ReadContractResult<typeof erc165ABI, 'supportsInterface'>>(
  config: Omit<UseContractReadConfig<typeof erc165ABI, 'supportsInterface', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc165ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link libCloneABI}__.
 */
export function useLibClone(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: libCloneABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link libStringABI}__.
 */
export function useLibString(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: libStringABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link multicallableABI}__.
 */
export function useMulticallable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: multicallableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicallableABI}__.
 */
export function useMulticallableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof multicallableABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof multicallableABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof multicallableABI, TFunctionName>({ abi: multicallableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicallableABI}__ and `functionName` set to `"multicall"`.
 */
export function useMulticallableMulticall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof multicallableABI, 'multicall'>['abi'], 'multicall'> & {
        functionName?: 'multicall'
      }
    : UseContractWriteConfig<TMode, typeof multicallableABI, 'multicall'> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any
) {
  return useContractWrite<TMode, typeof multicallableABI, 'multicall'>({ abi: multicallableABI, functionName: 'multicall', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicallableABI}__.
 */
export function usePrepareMulticallableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof multicallableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: multicallableABI, ...config } as UsePrepareContractWriteConfig<typeof multicallableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicallableABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareMulticallableMulticall(
  config: Omit<UsePrepareContractWriteConfig<typeof multicallableABI, 'multicall'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: multicallableABI, functionName: 'multicall', ...config } as UsePrepareContractWriteConfig<
    typeof multicallableABI,
    'multicall'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link permitABI}__.
 */
export function usePermit(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: permitABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permitABI}__.
 */
export function usePermitWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof permitABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof permitABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof permitABI, TFunctionName>({ abi: permitABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permitABI}__ and `functionName` set to `"permit"`.
 */
export function usePermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof permitABI, 'permit'>['abi'], 'permit'> & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof permitABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof permitABI, 'permit'>({ abi: permitABI, functionName: 'permit', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permitABI}__.
 */
export function usePreparePermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof permitABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: permitABI, ...config } as UsePrepareContractWriteConfig<typeof permitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permitABI}__ and `functionName` set to `"permit"`.
 */
export function usePreparePermitPermit(config: Omit<UsePrepareContractWriteConfig<typeof permitABI, 'permit'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: permitABI, functionName: 'permit', ...config } as UsePrepareContractWriteConfig<typeof permitABI, 'permit'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link reentrancyGuardABI}__.
 */
export function useReentrancyGuard(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: reentrancyGuardABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sstore2ABI}__.
 */
export function useSstore2(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: sstore2ABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link safeCastLibABI}__.
 */
export function useSafeCastLib(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: safeCastLibABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link safeMulticallableABI}__.
 */
export function useSafeMulticallable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: safeMulticallableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeMulticallableABI}__.
 */
export function useSafeMulticallableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof safeMulticallableABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof safeMulticallableABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof safeMulticallableABI, TFunctionName>({ abi: safeMulticallableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeMulticallableABI}__ and `functionName` set to `"multicall"`.
 */
export function useSafeMulticallableMulticall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof safeMulticallableABI, 'multicall'>['abi'], 'multicall'> & {
        functionName?: 'multicall'
      }
    : UseContractWriteConfig<TMode, typeof safeMulticallableABI, 'multicall'> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any
) {
  return useContractWrite<TMode, typeof safeMulticallableABI, 'multicall'>({ abi: safeMulticallableABI, functionName: 'multicall', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeMulticallableABI}__.
 */
export function usePrepareSafeMulticallableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof safeMulticallableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: safeMulticallableABI, ...config } as UsePrepareContractWriteConfig<
    typeof safeMulticallableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeMulticallableABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareSafeMulticallableMulticall(
  config: Omit<UsePrepareContractWriteConfig<typeof safeMulticallableABI, 'multicall'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: safeMulticallableABI, functionName: 'multicall', ...config } as UsePrepareContractWriteConfig<
    typeof safeMulticallableABI,
    'multicall'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link safeTransferLibABI}__.
 */
export function useSafeTransferLib(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: safeTransferLibABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link selfPermitABI}__.
 */
export function useSelfPermit(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: selfPermitABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__.
 */
export function useSelfPermitWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof selfPermitABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof selfPermitABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof selfPermitABI, TFunctionName>({ abi: selfPermitABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit"`.
 */
export function useSelfPermitSelfPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof selfPermitABI, 'selfPermit'>['abi'], 'selfPermit'> & {
        functionName?: 'selfPermit'
      }
    : UseContractWriteConfig<TMode, typeof selfPermitABI, 'selfPermit'> & {
        abi?: never
        functionName?: 'selfPermit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof selfPermitABI, 'selfPermit'>({ abi: selfPermitABI, functionName: 'selfPermit', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit1155"`.
 */
export function useSelfPermitSelfPermit1155<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof selfPermitABI, 'selfPermit1155'>['abi'], 'selfPermit1155'> & {
        functionName?: 'selfPermit1155'
      }
    : UseContractWriteConfig<TMode, typeof selfPermitABI, 'selfPermit1155'> & {
        abi?: never
        functionName?: 'selfPermit1155'
      } = {} as any
) {
  return useContractWrite<TMode, typeof selfPermitABI, 'selfPermit1155'>({ abi: selfPermitABI, functionName: 'selfPermit1155', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit721"`.
 */
export function useSelfPermitSelfPermit721<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof selfPermitABI, 'selfPermit721'>['abi'], 'selfPermit721'> & {
        functionName?: 'selfPermit721'
      }
    : UseContractWriteConfig<TMode, typeof selfPermitABI, 'selfPermit721'> & {
        abi?: never
        functionName?: 'selfPermit721'
      } = {} as any
) {
  return useContractWrite<TMode, typeof selfPermitABI, 'selfPermit721'>({ abi: selfPermitABI, functionName: 'selfPermit721', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermitAllowed"`.
 */
export function useSelfPermitSelfPermitAllowed<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof selfPermitABI, 'selfPermitAllowed'>['abi'], 'selfPermitAllowed'> & {
        functionName?: 'selfPermitAllowed'
      }
    : UseContractWriteConfig<TMode, typeof selfPermitABI, 'selfPermitAllowed'> & {
        abi?: never
        functionName?: 'selfPermitAllowed'
      } = {} as any
) {
  return useContractWrite<TMode, typeof selfPermitABI, 'selfPermitAllowed'>({
    abi: selfPermitABI,
    functionName: 'selfPermitAllowed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__.
 */
export function usePrepareSelfPermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof selfPermitABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: selfPermitABI, ...config } as UsePrepareContractWriteConfig<typeof selfPermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit"`.
 */
export function usePrepareSelfPermitSelfPermit(
  config: Omit<UsePrepareContractWriteConfig<typeof selfPermitABI, 'selfPermit'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: selfPermitABI, functionName: 'selfPermit', ...config } as UsePrepareContractWriteConfig<
    typeof selfPermitABI,
    'selfPermit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit1155"`.
 */
export function usePrepareSelfPermitSelfPermit1155(
  config: Omit<UsePrepareContractWriteConfig<typeof selfPermitABI, 'selfPermit1155'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: selfPermitABI, functionName: 'selfPermit1155', ...config } as UsePrepareContractWriteConfig<
    typeof selfPermitABI,
    'selfPermit1155'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit721"`.
 */
export function usePrepareSelfPermitSelfPermit721(
  config: Omit<UsePrepareContractWriteConfig<typeof selfPermitABI, 'selfPermit721'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: selfPermitABI, functionName: 'selfPermit721', ...config } as UsePrepareContractWriteConfig<
    typeof selfPermitABI,
    'selfPermit721'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermitAllowed"`.
 */
export function usePrepareSelfPermitSelfPermitAllowed(
  config: Omit<UsePrepareContractWriteConfig<typeof selfPermitABI, 'selfPermitAllowed'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: selfPermitABI, functionName: 'selfPermitAllowed', ...config } as UsePrepareContractWriteConfig<
    typeof selfPermitABI,
    'selfPermitAllowed'
  >)
}
